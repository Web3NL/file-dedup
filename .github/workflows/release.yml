name: Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: file-dedup
            asset_name: file-dedup-linux-x86_64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            artifact_name: file-dedup
            asset_name: file-dedup-linux-musl-x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: file-dedup.exe
            asset_name: file-dedup-windows-x86_64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: file-dedup
            asset_name: file-dedup-macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: file-dedup
            asset_name: file-dedup-macos-arm64

    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    
    - name: Install musl tools (Linux musl only)
      if: matrix.target == 'x86_64-unknown-linux-musl'
      run: sudo apt-get update && sudo apt-get install -y musl-tools

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-registry-

    - name: Cache cargo index
      uses: actions/cache@v4
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-index-

    - name: Cache target directory
      uses: actions/cache@v4
      with:
        path: target
        key: ${{ runner.os }}-${{ matrix.target }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.target }}-cargo-build-target-

    - name: Build
      run: cargo build --release --target ${{ matrix.target }}

    - name: Run tests
      run: cargo test --release --target ${{ matrix.target }}

    - name: Strip binary (Linux and macOS)
      if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'
      run: strip target/${{ matrix.target }}/release/${{ matrix.artifact_name }}

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.asset_name }}
        path: target/${{ matrix.target }}/release/${{ matrix.artifact_name }}

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Prepare release assets
      run: |
        mkdir release-assets
        for dir in artifacts/*/; do
          dirname=$(basename "$dir")
          if [[ "$dirname" == *".exe" ]]; then
            cp "$dir"* "release-assets/$dirname"
          else
            cp "$dir"* "release-assets/$dirname"
            chmod +x "release-assets/$dirname"
          fi
        done
        ls -la release-assets/

    - name: Generate changelog
      id: changelog
      run: |
        # Extract version from tag
        VERSION=${GITHUB_REF#refs/tags/}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
        # Generate changelog from git log
        if [ $(git tag --list | wc -l) -le 1 ]; then
          # First release
          CHANGELOG="Initial release of file-dedup $VERSION"
        else
          # Get previous tag
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          if [ -n "$PREV_TAG" ]; then
            CHANGELOG=$(git log --pretty=format:"- %s" $PREV_TAG..HEAD | grep -v "^- Merge")
          else
            CHANGELOG="Release $VERSION"
          fi
        fi
        
        # Save changelog to file
        cat > CHANGELOG.md << EOF
        # What's Changed
        
        $CHANGELOG
        
        ## Installation
        
        Download the appropriate binary for your platform:
        
        - **Linux (glibc)**: \`file-dedup-linux-x86_64\`
        - **Linux (musl)**: \`file-dedup-linux-musl-x86_64\` (static binary, works on any Linux)
        - **macOS (Intel)**: \`file-dedup-macos-x86_64\`
        - **macOS (Apple Silicon)**: \`file-dedup-macos-arm64\`
        - **Windows**: \`file-dedup-windows-x86_64.exe\`
        
        Make the binary executable and add it to your PATH:
        \`\`\`bash
        chmod +x file-dedup-*
        sudo mv file-dedup-* /usr/local/bin/file-dedup
        \`\`\`
        
        ## Usage
        
        \`\`\`bash
        # Scan for duplicates (report only)
        file-dedup /path/to/directory
        
        # Interactive deletion mode
        file-dedup --interactive /path/to/directory
        \`\`\`
        EOF

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        name: Release ${{ steps.changelog.outputs.version }}
        body_path: CHANGELOG.md
        draft: false
        prerelease: false
        files: release-assets/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

